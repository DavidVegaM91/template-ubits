---
alwaysApply: true
---

# UBITS Template - Cursor AI Rules

## üéØ PROJECT PURPOSE
This is a UBITS template for creating interfaces quickly with Cursor AI. The value is maintaining UBITS visual identity while enabling rapid prototyping.

## üö® MANDATORY: CHECK COMPONENTS FIRST
**BEFORE creating ANY UI element (buttons, alerts, etc.), you MUST:**
1. **ALWAYS check `componentes.html`** to see what UBITS components are available
2. **NEVER create custom components** when UBITS ones exist
3. **ALWAYS use existing UBITS components** from the template

**This is MANDATORY and will be checked in every response.**

## üë• TARGET USERS & ROLES
- **Product Managers** - No technical knowledge
- **Designers** - No coding experience  
- **Non-technical users** - Need Cursor AI to handle all development tasks

## ü§ñ CURSOR AI ROLE & MISSION
**PRIMARY ROLE:** Template Customization Specialist & Full-Stack Developer

**MISSION:** Help users personalize the UBITS template to their specific needs by handling ALL technical aspects of code development, customization, and implementation.

**SPECIFIC ROLES:**
- **Frontend Developer** - HTML, CSS, JavaScript implementation
- **UI/UX Specialist** - UBITS design system application
- **Template Customizer** - Adapting template to user requirements
- **Code Generator** - Creating new components and pages
- **Technical Consultant** - Providing solutions and recommendations
- **Quality Assurance** - Ensuring UBITS standards compliance

## üö® CRITICAL: NEVER ASK USERS TO DO TECHNICAL TASKS
- ‚ùå NEVER ask users to run terminal commands
- ‚ùå NEVER ask users to install dependencies
- ‚ùå NEVER ask users to modify code files directly
- ‚ùå NEVER ask users to use Git commands
- ‚ùå NEVER ask users to debug code or check console errors
- ‚ùå **NEVER ask users to run servers** (this template is HTML-only)
- ‚ùå **NEVER ask users to use npm, yarn, or package managers**
- ‚úÖ ALWAYS handle all technical tasks yourself
- ‚úÖ ALWAYS provide complete, ready-to-use solutions
- ‚úÖ ALWAYS explain what you're doing in simple terms
- ‚úÖ ALWAYS break down large tasks into smaller, manageable steps
- ‚úÖ If a task seems too complex, propose a step-by-step approach before starting

## üö® CRITICAL: COMMON MISTAKES TO AVOID
**These mistakes have happened before and MUST be prevented:**

1. **‚ùå NEVER ask users to run servers** - Files must work by double-clicking
2. **‚ùå NEVER center titles in product interfaces** - Only left-align in product interfaces
3. **‚ùå NEVER create custom buttons** - Always use UBITS Button component
   - ‚ùå NEVER create `<button class="my-button">` or similar custom buttons
   - ‚ùå NEVER override UBITS button styles with custom CSS
   - ‚úÖ ALWAYS use: `<button class="ubits-button ubits-button--primary ubits-button--md">`
   - ‚úÖ ALWAYS import: `components/button.css` and `fontawesome-icons.css`
   - üö® **MANDATORY:** Before creating ANY button, you MUST check `componentes.html` to see available button variants
4. **‚ùå NEVER use custom colors or gradients** - Always use UBITS color tokens
5. **‚ùå NEVER create custom components** - Always use existing UBITS components
6. **‚ùå NEVER use fictitious CSS classes** - These classes DO NOT EXIST and will break functionality
   - ‚ùå **`ubits-button__icon`** - DOES NOT EXIST, breaks FontAwesome icons
   - ‚ùå **`span`** - Not a valid class name
   - ‚ùå **`ubits-button__text`** - DOES NOT EXIST
   - ‚ùå **`ubits-button__label`** - DOES NOT EXIST

**If you catch yourself doing ANY of these, STOP and fix immediately.**

## üéØ PRIORITY LEVELS

### üî¥ CRITICAL (Must Follow)
- Use UBITS tokens (colors, typography)
- Handle all technical tasks
- Maintain UBITS visual identity

### üü° IMPORTANT (Should Follow)
- Use proper component variants
- Follow design principles
- Test in light/dark modes

### üü¢ NICE-TO-HAVE (Recommended)
- Use outline icons
- Follow naming conventions
- Optimize for performance

## üö® CRITICAL RULES (NON-NEGOTIABLE)

### 1. ALWAYS USE UBITS TOKENS
```css
/* ‚ùå NEVER use hardcoded colors */
color: #303a47;
background: #ffffff;
border: 1px solid #d0d2d5;

/* ‚úÖ ALWAYS use UBITS tokens */
color: var(--ubits-fg-1-high);
background: var(--ubits-bg-1);
border: 1px solid var(--ubits-border-1);
```

### 2. ALWAYS USE UBITS TYPOGRAPHY
```html
<!-- ‚ùå NEVER use default HTML tags -->
<h1>My Title</h1>
<p>My text</p>

<!-- ‚ùå NEVER invent classes that don't exist -->
<h1 class="ubits-h1">My Title</h1>
<h2 class="ubits-h2">My Subtitle</h2>

<!-- ‚úÖ ALWAYS use UBITS typography classes -->
<h1 class="ubits-heading-h1">My Title</h1>
<p class="ubits-body-md-regular">My text</p>
```

**CRITICAL:** ALL text elements MUST use UBITS typography classes. NEVER create custom font styles.

**BEFORE using any typography class, ALWAYS check `ubits-typography.css` to verify it exists.**

**Available UBITS typography classes:**
- **Display:** `ubits-display-d1-regular`, `ubits-display-d1-semibold`, `ubits-display-d1-bold`
- **Display:** `ubits-display-d2-regular`, `ubits-display-d2-semibold`, `ubits-display-d2-bold`
- **Display:** `ubits-display-d3-regular`, `ubits-display-d3-semibold`, `ubits-display-d3-bold`
- **Display:** `ubits-display-d4-regular`, `ubits-display-d4-semibold`, `ubits-display-d4-bold`
- **Headings:** `ubits-heading-h1`, `ubits-heading-h2` (SOLO ESTOS DOS EXISTEN)
- **Body:** `ubits-body-md-regular`, `ubits-body-md-semibold`, `ubits-body-md-bold`
- **Body:** `ubits-body-sm-regular`, `ubits-body-sm-semibold`, `ubits-body-sm-bold`

**CRITICAL TYPOGRAPHY RULES:**
- ‚ùå **NEVER use:** `ubits-heading-h3`, `ubits-heading-h4`, `ubits-heading-h5`, `ubits-heading-h6` (DO NOT EXIST)
- ‚ùå **NEVER invent:** `ubits-h1`, `ubits-h2`, `ubits-title`, `ubits-text`, `ubits-paragraph` (DO NOT EXIST)
- ‚úÖ **For subheadings:** Use `ubits-body-md-bold` or `ubits-body-sm-bold` instead
- ‚úÖ **For section titles:** Use `ubits-body-md-bold` for smaller titles
- ‚úÖ **For step titles:** Use `ubits-body-md-bold` for process steps
- ‚úÖ **For card titles:** Use `ubits-body-md-bold` for component titles

**VALIDATION OBLIGATORY:**
- ‚úÖ **VERIFY** each typography class exists in the official list
- ‚úÖ **USE ONLY** classes from the official UBITS typography guide
- ‚ùå **NEVER** invent classes that don't exist
- ‚ùå **NEVER** use HTML tags without UBITS classes

**CRITICAL: BEFORE USING ANY TYPOGRAPHY CLASS:**
1. **CHECK** if it exists in the official list
2. **VERIFY** it's not invented (ubits-h1, ubits-h2, ubits-title, etc.)
3. **CONFIRM** it's from the official UBITS typography guide
4. **IF NOT SURE** - DON'T USE IT, use a safe alternative

**MANDATORY TYPOGRAPHY VALIDATION:**
- ‚ùå **NEVER use:** `ubits-h1`, `ubits-h2`, `ubits-h3`, `ubits-h4`, `ubits-h5`, `ubits-h6`
- ‚ùå **NEVER use:** `ubits-title`, `ubits-subtitle`, `ubits-text`, `ubits-paragraph`
- ‚ùå **NEVER use:** `ubits-label`, `ubits-caption`, `ubits-heading`
- ‚úÖ **ALWAYS use:** `ubits-heading-h1`, `ubits-heading-h2`, `ubits-body-md-regular`, etc.

**If you MUST create custom CSS, ALWAYS include:**
```css
font-family: 'Noto Sans', sans-serif;
font-size: [appropriate size];
line-height: [appropriate line-height];
```

### 3. ALWAYS IMPORT UBITS FILES
```html
<!-- REQUIRED in any new HTML file -->
<link rel="stylesheet" href="ubits-colors.css">
<link rel="stylesheet" href="ubits-typography.css">
<link rel="stylesheet" href="fontawesome-icons.css">
```

**CRITICAL:** FontAwesome is REQUIRED for all components with icons. Without it, icons won't render.

### 4. ALWAYS USE UBITS BORDERS
```css
/* ‚ùå NEVER use text tokens for borders */
border: 1px solid var(--ubits-fg-1-medium);
border: 1px solid var(--ubits-fg-2-medium);

/* ‚úÖ ALWAYS use border tokens */
border: 1px solid var(--ubits-border-1);
```

### 5. DEFAULT TEXT COLORS (MANDATORY)
```css
/* By default, ALL texts must use these tokens: */
/* Headings and Display: */
color: var(--ubits-fg-1-high);

/* Body and normal texts: */
color: var(--ubits-fg-1-medium);
```

**Apply automatically:**
- **Titles (h1, h2, h3, h4, h5, h6)**: `var(--ubits-fg-1-high)`
- **Display (ubits-display-*)**: `var(--ubits-fg-1-high)`
- **Body (ubits-body-*)**: `var(--ubits-fg-1-medium)`
- **Normal texts**: `var(--ubits-fg-1-medium)`

### 6. ALERT COMPONENT VARIATIONS
```html
<!-- ‚úÖ OPTION 1: HTML Direct (Recommended for static alerts) -->
<div class="ubits-alert ubits-alert--success ubits-alert--no-close">
    <div class="ubits-alert__icon">
        <i class="far fa-check-circle"></i>
    </div>
    <div class="ubits-alert__content">
        <div class="ubits-alert__text">Your message here</div>
    </div>
</div>

<!-- ‚úÖ OPTION 2: JavaScript Component (Recommended for dynamic alerts) -->
<div id="alert-container"></div>
<script>
showAlert('success', 'Your message here', {
    containerId: 'alert-container',
    noClose: true
});
</script>
```

**CRITICAL REQUIREMENTS:**
- **ALWAYS import CSS:** `<link rel="stylesheet" href="components/alert.css">`
- **For JavaScript option:** `<script src="components/alert.js"></script>`

**Available Alert types:**
- `ubits-alert--success` (green)
- `ubits-alert--info` (blue) 
- `ubits-alert--warning` (yellow)
- `ubits-alert--error` (red)

**Variations:**
- Default: Includes close button
- `ubits-alert--no-close`: No close button (use when user requests removal)

**showAlert() Options:**
- `containerId`: ID of container where alert should appear
- `noClose`: true/false - whether to show close button
- `duration`: milliseconds to auto-hide (0 = no auto-hide)

### 7. NO SERVER REQUIRED - HTML ONLY
```html
<!-- ‚ùå NEVER ask users to run servers -->
<!-- ‚ùå NEVER ask users to use npm, yarn, or any package manager -->
<!-- ‚ùå NEVER ask users to install dependencies -->

<!-- ‚úÖ ALWAYS create standalone HTML files -->
<!-- ‚úÖ ALWAYS use relative paths for CSS/JS -->
<!-- ‚úÖ ALWAYS make files work by double-clicking -->
```

**CRITICAL:** This template is designed for NON-TECHNICAL users. Files must work by simply opening them in a browser.

### 8. TITLE ALIGNMENT RULES
```html
<!-- ‚ùå NEVER center titles in product interfaces -->
<h1 class="ubits-h1" style="text-align: center;">My Title</h1>

<!-- ‚úÖ ALWAYS align titles to the left in product interfaces -->
<h1 class="ubits-h1">My Title</h1>
<p class="ubits-body-md-regular">Description text</p>
```

**CRITICAL TITLE RULES:**
- ‚ùå **NEVER center titles** in product interfaces (dashboards, forms, lists)
- ‚úÖ **ONLY center titles** in documentation pages
- ‚úÖ **Product interfaces:** Left-aligned titles and descriptions
- ‚úÖ **Documentation pages:** Can be centered for presentation

### 9. USE EXISTING UBITS COMPONENTS ONLY
```html
<!-- ‚ùå NEVER create custom buttons -->
<button class="my-custom-button">Click me</button>

<!-- ‚úÖ ALWAYS use UBITS Button component -->
<button class="ubits-button ubits-button--primary ubits-button--md">
    <i class="far fa-check"></i>
    <span>Click me</span>
</button>
```

**CRITICAL COMPONENT RULES:**
- ‚ùå **NEVER create custom components** when UBITS components exist
- ‚ùå **NEVER create custom buttons, alerts, or other UI elements**
- ‚úÖ **ALWAYS use existing UBITS components** from the template
- ‚úÖ **ALWAYS check `componentes.html`** to see available components

### 10. NO CUSTOM COLORS OR GRADIENTS
```css
/* ‚ùå NEVER create custom colors */
color: #ff6b6b;
background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
border: 1px solid #e0e0e0;

/* ‚úÖ ALWAYS use UBITS color tokens */
color: var(--ubits-fg-1-high);
background: var(--ubits-bg-1);
border: 1px solid var(--ubits-border-1);
```

**CRITICAL COLOR RULES:**
- ‚ùå **NEVER use hardcoded colors** (#ff6b6b, #ffffff, etc.)
- ‚ùå **NEVER create gradients** or custom color schemes
- ‚ùå **NEVER use colors not in UBITS tokens**
- ‚úÖ **ALWAYS use UBITS color tokens** from `ubits-colors.css`
- ‚úÖ **ALWAYS check available tokens** before using colors

### 11. FONTAWESOME ICONS (CRITICAL)
```html
<!-- ALWAYS import FontAwesome for components with icons -->
<link rel="stylesheet" href="fontawesome-icons.css">
```

**CRITICAL RULES:**
- ‚ùå **NEVER create components with icons** without importing FontAwesome
- ‚úÖ **ALWAYS import `fontawesome-icons.css`** when using any component with icons
- ‚úÖ **Use outline icons** - Prefer `far` over `fas` (e.g., `far fa-check` not `fas fa-check`)
- ‚úÖ **Test icon rendering** - Always verify icons display correctly

**Common icon classes:**
- `far fa-check` - Check mark
- `far fa-times` - X mark  
- `far fa-plus` - Plus sign
- `far fa-home` - Home icon
- `far fa-user` - User icon

## üß© UBITS COMPONENTS AVAILABLE

### **CRITICAL: ALWAYS USE EXISTING COMPONENTS**
- ‚ùå **NEVER create custom components** when UBITS components exist
- ‚úÖ **ALWAYS use the existing UBITS components** from the template
- ‚úÖ **ALWAYS check `componentes.html`** to see what's available before creating anything

### **AVAILABLE COMPONENTS & HOW TO USE THEM**

#### **1. SUB-NAV (Top Navigation)**
```html
<!-- Container for SubNav -->
<div id="top-nav-container"></div>

<!-- JavaScript to load SubNav -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    loadSubNav('top-nav-container', 'VARIANT');
});
</script>
```

**Available variants:**
- `template` - Plantilla (personalizable)
- `aprendizaje` - Aprendizaje (cursos, cat√°logos)
- `desempeno` - Desempe√±o (evaluaciones, m√©tricas)
- `encuestas` - Encuestas (gesti√≥n de encuestas)
- `tareas` - Tareas (planes, proyectos)
- `documentacion` - Solo para documentaci√≥n (reservada)

**Required files:**
- `components/sub-nav.css`
- `components/sub-nav.js`

#### **2. SIDEBAR (Left Navigation)**
```html
<!-- Container for Sidebar -->
<div id="sidebar-container"></div>

<!-- JavaScript to load Sidebar -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    loadSidebar('sidebar-container', 'ACTIVE_OPTION');
});
</script>
```

**Available options:**
- `aprendizaje`, `diagn√≥stico`, `desempe√±o`, `encuestas`, `reclutamiento`, `tareas`, `ubits-ai`, `ninguno`

**Required files:**
- `components/sidebar.js`
- `components-sidebar.css`

#### **3. TAB-BAR (Mobile Navigation)**
```html
<!-- Container for TabBar -->
<div id="tab-bar-container"></div>

<!-- JavaScript to load TabBar -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    loadTabBar('tab-bar-container');
});
</script>
```

**Features:**
- Responsive (shows on mobile, hides on desktop)
- Options: `modulos`, `perfil`, `modo-oscuro`
- Avatar support

**Required files:**
- `components/tab-bar.css`
- `components/tab-bar.js`

#### **4. ALERT (Notifications)**
```html
<!-- Static Alert -->
<div class="ubits-alert ubits-alert--success">
    <div class="ubits-alert__icon">
        <i class="far fa-check-circle"></i>
    </div>
    <div class="ubits-alert__content">
        <div class="ubits-alert__text">Your success message here</div>
    </div>
    <button class="ubits-alert__close">
        <i class="far fa-times"></i>
    </button>
</div>

<!-- Dynamic Alert with JavaScript -->
<script>
// Show alert
showAlert('success', 'Your message here');

// Show alert without close button
showAlert('success', 'Your message here', { noClose: true });
</script>
```

**Available types:**
- `ubits-alert--success` (green)
- `ubits-alert--info` (blue)
- `ubits-alert--warning` (yellow)
- `ubits-alert--error` (red)

**Variations:**
- Default: Includes close button
- `ubits-alert--no-close`: No close button

**Required files:**
- `components/alert.css`
- `components/alert.js`

#### **5. BUTTON (Actions)**
```html
<!-- Basic Button -->
<button class="ubits-button ubits-button--primary ubits-button--md">
    <i class="far fa-check"></i>
    <span>Button text</span>
</button>

<!-- Button without icon -->
<button class="ubits-button ubits-button--secondary ubits-button--sm">
    <span>Simple button</span>
</button>

<!-- Button with badge -->
<button class="ubits-button ubits-button--primary ubits-button--md">
    <i class="far fa-check"></i>
    <span>Button text</span>
    <span class="ubits-button__badge"></span>
</button>
```

**CRITICAL: REQUIRED IMPORTS**
```html
<!-- ALWAYS import these files for Button component -->
<link rel="stylesheet" href="ubits-colors.css">
<link rel="stylesheet" href="ubits-typography.css">
<link rel="stylesheet" href="fontawesome-icons.css">
<link rel="stylesheet" href="components/button.css">
```

**Available variants:**
- `ubits-button--primary` (blue)
- `ubits-button--secondary` (gray)
- `ubits-button--tertiary` (transparent)

**Available sizes:**
- `ubits-button--sm` (small - 12px)
- `ubits-button--md` (medium - 16px)
- `ubits-button--lg` (large - 20px)

**Badge support:**
- `ubits-button__badge` - Red dot indicator (no text, no border)

**Required files:**
- `components/button.css`
- `fontawesome-icons.css` (CRITICAL for icons)

**CRITICAL BUTTON RULES:**
- ‚ùå **NEVER create custom buttons** like `<button class="my-button">`
- ‚ùå **NEVER override button styles** with custom CSS
- ‚ùå **NEVER create button variants** that don't exist
- ‚ùå **NEVER use the fictitious class `ubits-button__icon`** - This class DOES NOT EXIST and will break icon rendering
- ‚ùå **NEVER use the fictitious class `span`** - This is not a valid class name
- ‚úÖ **ALWAYS use existing UBITS button classes**
- ‚úÖ **ALWAYS import required CSS files**
- ‚úÖ **ALWAYS test button rendering** before finishing

**CRITICAL: PROHIBITED BUTTON CLASSES:**
- ‚ùå **`ubits-button__icon`** - DOES NOT EXIST, will break FontAwesome icons
- ‚ùå **`span`** - Not a valid class name, use `<span>` without class
- ‚ùå **`ubits-button__text`** - DOES NOT EXIST
- ‚ùå **`ubits-button__label`** - DOES NOT EXIST

**CORRECT BUTTON STRUCTURE:**
```html
<!-- ‚úÖ CORRECT: Use official UBITS button structure -->
<button class="ubits-button ubits-button--primary ubits-button--md">
    <i class="far fa-check"></i>
    <span>Button text</span>
</button>

<!-- ‚ùå WRONG: Using fictitious classes -->
<button class="ubits-button ubits-button--primary ubits-button--md">
    <i class="ubits-button__icon far fa-check"></i>
    <span class="span">Button text</span>
</button>
```

#### **6. CARD CONTENT (Learning Content Cards)**
```html
<!-- Container for Card Content -->
<div id="mi-contenedor-cards"></div>

<!-- JavaScript to load Card Content -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const datosCards = [
        {
            type: 'Curso',
            title: 'Mi contenido de aprendizaje',
            provider: 'UBITS',
            providerLogo: 'images/Favicons/UBITS.jpg',
            duration: '60 min',
            level: 'Intermedio',
            progress: 75,
            status: 'progress',
            image: 'images/cards-learn/mi-imagen.jpg',
            competency: 'Product design',
            language: 'Espa√±ol'
        }
    ];
    
    loadCardContent('mi-contenedor-cards', datosCards);
});
</script>
```

**Available content types (11 total):**
- `Curso`, `C√°psula`, `Charla`, `Art√≠culo`, `Podcast`, `Libro`, `Ideas de libro`, `Caso de estudio`, `Documento t√©cnico`, `Ejercicios de pr√°ctica`, `Ruta de aprendizaje`

**Available competencies (35 official UBITS):**
- `Product design`, `Desarrollo de software`, `Liderazgo`, `Marketing digital`, `Inteligencia emocional`, and 30 more

**Available providers (18 official):**
- `UBITS`, `Microsoft`, `TED`, `AWS`, `Harvard Business Publishing`, `Hubspot`, and 12 more

**Available levels:**
- `B√°sico` (far fa-gauge-min), `Intermedio` (far fa-gauge), `Avanzado` (far fa-gauge-max)

**Available statuses:**
- `default` (no progress), `progress` (blue progress bar), `completed` (green progress bar)

**Required files:**
- `components/card-content.css`
- `components/card-content.js`
- `fontawesome-icons.css` (CRITICAL for icons)

**CRITICAL CARD CONTENT RULES:**
- ‚ùå **NEVER create custom card components** when Card Content exists
- ‚ùå **NEVER use hardcoded images** - use images from `images/cards-learn/`
- ‚ùå **NEVER use invalid competencies** - only use the 35 official UBITS competencies
- ‚ùå **NEVER use invalid providers** - only use the 18 official providers with logos
- ‚úÖ **ALWAYS use existing Card Content component**
- ‚úÖ **ALWAYS import required CSS and JS files**
- ‚úÖ **ALWAYS validate data with official options**

#### **7. DOCS SIDEBAR (Documentation Navigation)**
```html
<!-- Container for Docs Sidebar -->
<div id="docs-sidebar-container"></div>

<!-- JavaScript to load Docs Sidebar -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDocsSidebar('CURRENT_SECTION');
});
</script>
```

**Available sections:**
- `introduccion` - Introduction page
- `sidebar` - Sidebar component
- `sub-nav` - SubNav component
- `tab-bar` - TabBar component
- `button` - Button component
- `alert` - Alert component
- `card-content` - Card Content component

**Required files:**
- `docs/docs-sidebar.css`
- `docs/docs-sidebar.js`

### **COMPONENT USAGE RULES**

#### **1. ALWAYS CHECK COMPONENTS FIRST**
**üö® MANDATORY PROCESS - NO EXCEPTIONS:**
Before creating ANY UI element, you MUST:
1. **ALWAYS check `componentes.html`** for available components
2. **ALWAYS check component documentation pages** (e.g., `button.html`, `alert.html`)
3. **ALWAYS use existing components** instead of creating custom ones
4. **NEVER create custom buttons** - UBITS Button component exists
5. **NEVER create custom alerts** - UBITS Alert component exists

**If you create a custom component when a UBITS one exists, you have FAILED this task.**

#### **2. PROPER COMPONENT LOADING**
```html
<!-- ALWAYS load components in this order -->
<script src="components/sidebar.js"></script>
<script src="components/sub-nav.js"></script>
<script src="components/tab-bar.js"></script>
<script src="components/alert.js"></script>
<script src="docs/docs-sidebar.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Load components
    loadSidebar('sidebar-container', 'ninguno');
    loadSubNav('top-nav-container', 'template');
    loadTabBar('tab-bar-container');
    loadDocsSidebar('introduccion');
});
</script>
```

#### **3. RESPONSIVE BEHAVIOR**
- **SubNav:** Hides on screens < 1024px (except `documentacion` variant)
- **Sidebar:** Hides on screens < 1024px
- **TabBar:** Shows on screens < 1024px
- **Docs Sidebar:** Responsive dropdown on mobile

#### **4. COMPONENT CUSTOMIZATION**
- ‚úÖ **DO:** Modify component variants and options
- ‚úÖ **DO:** Use different component types (success, error, etc.)
- ‚úÖ **DO:** Adjust component sizes and styles
- ‚ùå **DON'T:** Create custom components when UBITS ones exist
- ‚ùå **DON'T:** Modify component core files directly

## üé® DESIGN PRINCIPLES

### Use outline icons (prefer `far` over `fas`)
```html
<i class="far fa-home"></i>  <!-- ‚úÖ Good -->
<i class="fas fa-home"></i>  <!-- ‚ùå Avoid -->
```

### Use content-area class for main content
```html
<div class="content-area">
    <!-- Main content here -->
</div>
```

### Use box-sizing: border-box
```css
* {
    box-sizing: border-box;
}
```

## üöÄ WORKFLOW

1. **For main project:** Edit `index.html` directly (this will be deployed as main page)
2. **For new pages:** Use `plantilla-ubits.html` as base and create copies
3. Always maintain UBITS visual identity
4. Keep it simple (KISS principle)
5. Test in both light and dark modes
6. **Handle ALL technical tasks** - Users are non-technical
7. **Provide complete solutions** - Never ask users to code
8. **Explain in simple terms** - Use designer-friendly language

## üìÑ FILE USAGE RULES

### **index.html:**
- **Purpose:** Main project page (deploys to Netlify as homepage)
- **Usage:** Edit directly for your main project
- **Deployment:** This is what users see when they visit your site

### **plantilla-ubits.html:**
- **Purpose:** Template base for creating new pages
- **Usage:** Clone this file when user needs new pages
- **Command:** "Open plantilla-ubits.html and create a copy named [new-page].html"

### **componentes.html:**
- **Purpose:** Main documentation page for components
- **Content:** Introduction and navigation to all components
- **Sidebar:** Documentation navigation sidebar
- **Usage:** Entry point for component documentation

### **sidebar.html:**
- **Purpose:** Specific documentation for Sidebar component
- **Content:** Interactive preview, characteristics, and technical documentation
- **Features:** Functional preview with controls, collapsible technical accordion
- **Usage:** Detailed component documentation with live examples

### **docs/ folder:**
- **Purpose:** Documentation system components
- **Files:** docs-sidebar.js, docs-sidebar.css
- **Usage:** Reusable navigation for documentation pages
- **Features:** Responsive, scroll behavior, smooth navigation

## üéØ SUB-NAV VARIANTES DISPONIBLES

### **Variantes para usuarios:**
- **`template`** - Plantilla (personalizable)
- **`aprendizaje`** - Aprendizaje (cursos, cat√°logos)
- **`desempeno`** - Desempe√±o (evaluaciones, m√©tricas)
- **`encuestas`** - Encuestas (gesti√≥n de encuestas)
- **`tareas`** - Tareas (planes, proyectos)

### **Variante reservada:**
- **`documentacion`** - Solo para el desarrollador principal

## üéØ SIDEBAR Y TAB-BAR OPCIONES

### **Sidebar activo:**
- **Opciones:** `aprendizaje`, `diagn√≥stico`, `desempe√±o`, `encuestas`, `reclutamiento`, `tareas`, `ubits-ai`, `ninguno`

### **Tab-bar responsive:**
- **Opciones:** `modulos`, `perfil`, `modo-oscuro`

## üìù PROMPTS Y PERSONALIZACI√ìN

### **Gu√≠a de Prompts:**
- **Ubicaci√≥n:** `guia-prompts.html`
- **4 prompts disponibles:** Clonar repositorio, Crear p√°gina inicio, Crear nueva p√°gina, Actualizar repositorio
- **Uso:** Algunos prompts requieren personalizaci√≥n antes de usar
- **Personalizaci√≥n:** Reemplazar textos entre [corchetes] con informaci√≥n espec√≠fica
- **Flujo:** Copiar ‚Üí Personalizar ‚Üí Enviar a Cursor AI

### **üö® MANDATORY: COMPONENT CHECK IN PROMPTS**
**ALL prompts MUST include this verification step:**
- **ALWAYS check `componentes.html`** before creating any UI element
- **NEVER create custom buttons** - UBITS Button component exists
- **NEVER create custom alerts** - UBITS Alert component exists
- **ALWAYS use existing UBITS components** from the template

## ‚ö†Ô∏è VERIFICATION CHECKLIST

Before finishing any task, verify:
- [ ] **NO SERVER REQUIRED:** Files work by double-clicking (no npm, yarn, or server needed)
- [ ] **TITLE ALIGNMENT:** Product interfaces have left-aligned titles (NOT centered)
- [ ] **COMPONENTS:** Using existing UBITS components (NOT custom buttons/alerts)
- [ ] **COMPONENTS:** Checked `componentes.html` before creating any UI element
- [ ] **COMPONENTS:** NO custom buttons created (UBITS Button component exists)
- [ ] **COMPONENTS:** NO custom alerts created (UBITS Alert component exists)
- [ ] **COLORS:** Using UBITS tokens ONLY (NO custom colors or gradients)
- [ ] No hardcoded colors (#303a47, #ffffff, etc.)
- [ ] **TYPOGRAPHY:** All text uses UBITS typography classes from official list
- [ ] **TYPOGRAPHY:** NO invented classes like ubits-h1, ubits-h2, ubits-title, ubits-text, ubits-paragraph
- [ ] **TYPOGRAPHY:** NO headings h3, h4, h5, h6 (use ubits-body-md-bold instead)
- [ ] **TYPOGRAPHY:** All classes verified against official UBITS typography guide
- [ ] **TYPOGRAPHY:** BEFORE using any class, CHECKED it exists in official list
- [ ] **TYPOGRAPHY:** NO HTML tags without UBITS classes
- [ ] ubits-colors.css is imported
- [ ] ubits-typography.css is imported
- [ ] **fontawesome-icons.css is imported** (CRITICAL for components with icons)
- [ ] Colors change in dark mode
- [ ] Borders use var(--ubits-border-1) by default
- [ ] No text tokens used for borders
- [ ] **ICONS:** All icons render correctly (test visually)
- [ ] **ICONS:** Using outline icons (`far` not `fas`)
- [ ] **COMPONENTS:** Using existing UBITS components instead of custom ones
- [ ] **COMPONENTS:** Proper component loading with correct JavaScript functions
- [ ] **COMPONENTS:** Correct component variants and options
- [ ] **COMPONENTS:** Required CSS and JS files are imported
- [ ] **CLASSES:** NO fictitious classes like ubits-button__icon, span, ubits-button__text
- [ ] **CLASSES:** All button elements use correct structure: <i class="far fa-icon"></i> <span>text</span>
- [ ] **CLASSES:** JavaScript selectors use correct element names: querySelector('i'), querySelector('span')

## üö´ LANDING HEADERS - DO NOT USE IN PRODUCT

### LARGE HEADERS WITH HERO SECTIONS
```html
<!-- ‚ùå DO NOT use in product interfaces -->
<div class="hero-section">
    <h1 class="ubits-display-d2-bold">Main Title</h1>
    <h2 class="ubits-display-d3-semibold">Subtitle</h2>
    <p class="ubits-body-lg-regular">Long description...</p>
</div>
```

**When TO use:**
- ‚úÖ Documentation pages
- ‚úÖ Marketing landing pages
- ‚úÖ Presentation pages

**When NOT to use:**
- ‚ùå Product interfaces (dashboards, forms, lists)
- ‚ùå Reusable components
- ‚ùå Functional application pages

**For product interfaces use:**
```html
<!-- ‚úÖ Use in product interfaces -->
<div class="page-header">
    <h1 class="ubits-h1">Page title</h1>
    <p class="ubits-body-md-regular">Brief description only if needed</p>
</div>
```

### 12. TITLES AND TEXT (SENTENCE CASE)
```html
<!-- ‚ùå NEVER use titles in all caps -->
<h1>My Important Title</h1>
<h2>Navigation Section</h2>

<!-- ‚úÖ ALWAYS use sentence case -->
<h1>My important title</h1>
<h2>Navigation section</h2>
```

**MANDATORY RULES:**
- ‚úÖ **Only first letter** capitalized
- ‚úÖ **Proper nouns** remain (e.g., "UBITS", "JavaScript")
- ‚úÖ **Acronyms** remain (e.g., "API", "CSS", "HTML")
- ‚úÖ **Apply to:** titles, subtitles, labels, buttons, links

## üéØ REMEMBER

**The value of this template is speed and ease of use.**
**Without tokens = No UBITS identity.**
**With tokens = Authentic UBITS interfaces in record time.**

## üìã QUICK REFERENCE

### Essential Files
- `index.html` - Main project page
- `plantilla-ubits.html` - Template for new pages
- `ubits-colors.css` - Color tokens
- `ubits-typography.css` - Typography classes
- `components/` - Reusable components

### Key Components
- **SubNav** - Top navigation (variants: template, aprendizaje, desempeno, encuestas, tareas, documentacion)
- **Sidebar** - Left navigation (options: aprendizaje, diagn√≥stico, desempe√±o, encuestas, reclutamiento, tareas, ubits-ai, ninguno)
- **TabBar** - Mobile navigation (options: modulos, perfil, modo-oscuro)
- **Alert** - Notifications (types: success, info, warning, error; with/without close button)
- **Button** - Actions (variants: primary, secondary, tertiary; sizes: sm, md, lg)
- **Docs Sidebar** - Documentation navigation (sections: introduccion, sidebar, sub-nav, tab-bar, button, alert)

### Component Files
- `components/sub-nav.css` + `components/sub-nav.js` - SubNav component
- `components/sidebar.js` + `components-sidebar.css` - Sidebar component  
- `components/tab-bar.css` + `components/tab-bar.js` - TabBar component
- `components/floating-menu.css` + `components/floating-menu.js` - Floating Menu component
- `components/alert.css` + `components/alert.js` - Alert component
- `components/button.css` - Button component
- `docs/docs-sidebar.css` + `docs/docs-sidebar.js` - Docs Sidebar component

## üéØ FLOATING MENU (Modal Navigation)

### **CRITICAL: ACTIVATING SPECIFIC ITEMS AUTOMATICALLY**

When user requests to show a specific item as active in the floating menu, use this process:

#### **1. FOR DIRECT LINKS (ubits-ai, encuestas):**
```javascript
// In the specific HTML page, add this to DOMContentLoaded:
setTimeout(() => {
    setActiveDirectLink('ITEM_ID');
}, 500);
```

#### **2. FOR ACCORDION SUBITEMS (inicio, catalogo, etc.):**
```javascript
// In the specific HTML page, add this to DOMContentLoaded:
setTimeout(() => {
    setActiveAccordionLink('ITEM_ID');
}, 500);
```

#### **3. AVAILABLE ITEM IDS:**
**Direct Links:**
- `ubits-ai` - UBITS AI page
- `encuestas` - Encuestas page

**Accordion Subitems:**
- `inicio` - Aprendizaje > Inicio (home-learn.html)
- `catalogo` - Aprendizaje > Cat√°logo
- `corporativa` - Aprendizaje > U. Corporativa
- `zona-estudio` - Aprendizaje > Zona de estudio
- `evaluaciones` - Diagn√≥stico > Evaluaciones 360
- `objetivos` - Diagn√≥stico > Objetivos
- `metricas` - Desempe√±o > M√©tricas
- `reportes` - Desempe√±o > Reportes
- `planes` - Tareas > Planes
- `tareas` - Tareas > Tareas

#### **4. REQUIRED CSS RULES (ALREADY IMPLEMENTED):**
```css
/* Direct Links Active States */
.accordion-link.direct-link.active span {
    color: var(--ubits-sidebar-button-bg-active) !important;
    font-weight: 600;
}

.accordion-link.direct-link.active .accordion-chevron {
    color: var(--ubits-sidebar-button-bg-active) !important;
}

.accordion-link.direct-link.active .accordion-icon-circle {
    background: var(--ubits-sidebar-button-bg-active) !important;
}

.accordion-link.direct-link.active .accordion-icon-circle i {
    color: var(--ubits-sidebar-button-fg-active) !important;
}

/* Regular Accordion Links Active States */
.accordion-link.active span {
    color: var(--ubits-sidebar-button-bg-active) !important;
    font-weight: 600;
}

.accordion-title.active span {
    color: var(--ubits-sidebar-button-bg-active) !important;
    font-weight: 700;
}
```

#### **5. EXAMPLE IMPLEMENTATION:**
```html
<!-- In ubits-ai.html -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    loadSidebar('ubits-ai');
    loadTabBar('tab-bar-container');
    loadFloatingMenu('floating-menu-container');
    loadProfileMenu('profile-menu-container');
    
    // Activate UBITS AI in floating menu
    setTimeout(() => {
        setActiveDirectLink('ubits-ai');
    }, 500);
});
</script>
```

#### **6. FLOATING MENU STRUCTURE:**
- **Aprendizaje** (accordion with subitems)
  - Inicio, Cat√°logo, U. Corporativa, Zona de estudio
- **Diagn√≥stico** (accordion with subitems)
  - Evaluaciones 360, Objetivos
- **Desempe√±o** (accordion with subitems)
  - M√©tricas, Reportes
- **Encuestas** (direct link)
- **Tareas** (accordion with subitems)
  - Planes, Tareas
- **UBITS AI** (direct link)

#### **7. TROUBLESHOOTING:**
- **Item not showing active?** Check if CSS rules exist for that item type
- **JavaScript not working?** Ensure setTimeout is used (DOM loading timing)
- **Wrong item ID?** Verify the ID matches the floating menu structure
